<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath*:db.properties" />
	
	<!-- 히카리 CP - 빈 등록 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="${ORACLE_DB_DRIVER}" />
		<property name="jdbcUrl" value="${ORACLE_DB_URL}" />
		<property name="username" value="${ORACLE_DB_USERNAME}" />
		<property name="password" value="${ORACLE_DB_PASSWORD}" />
	</bean>
		
	<!-- 히카리 CP - 설정 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<!-- Spring과 MyBatis 연동 설정 -->
	<!-- MyBatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"></property>
        <!-- <property name="mapperLocations" value="classpath:mapper/**/*.xml"></property> -->
    </bean>
	
	<!-- SqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!-- transactionManager bean -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- transactional annotation 설정 사용 -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
	<!-- 파일 업로드 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxUploadSize" value="10485760"/>
    	<property name="maxUploadSizePerFile" value="10485760"/>
    	<property name="maxInMemorySize" value="0" />
	</bean>
	
	<!-- AOP 추가 -->
	
	<!--  XML 방식의 AOP - AsepectJ Weaver -->
	<!-- 유의할 점: AOP 쓸 때는 interface 절대 안 됨 -->
	<!-- 관점 부분만 가능함 -->
	<bean id="memberService" class="com.community.website.service.aop.MemberServiceImpl"></bean>
	<bean id="txAdviceXML" class="com.community.website.aop.member.LogAdvisorImpl"></bean>

	<aop:config>
		<!-- txAdviceXML 하나 영역임 -->
		<aop:aspect ref='txAdviceXML'>

			<!-- 진입영역 -->
			<!-- 1개만 가능함 -->
			<!-- <aop:pointcut id="point1" expression="execution(* com.website.example.test..*())"/> -->
			<!-- update*(..) update로 시작하는 모든 메소드 -->
			<aop:pointcut id="point1" expression="execution(* com.community.website.service.aop.MemberServiceImpl..*(..))"/>            
         	
         	<!-- before -->
         	<aop:before method="beforeAdvice" pointcut-ref="point1"/>
         	<!-- after -->
         	<aop:after method="afterAdvice" pointcut-ref="point1"/>
         	
         	<!-- around(메서드 자체를 가로채기) -->
         	<aop:around method="aroundAdvice" pointcut-ref="point1"/>
         	
         	<!-- afterThrowing -->
         	<aop:after-throwing method="afterThrowing" pointcut-ref="point1"/>
         	
         	<!-- afterReturning -->
         	<aop:after-returning method="afterReturning" pointcut-ref="point1"/>
         	
        </aop:aspect>
        
        <!-- 2번째 선언자 -->
	</aop:config>
	
	<!-- Beans Scan -->
	<context:component-scan base-package="com.community.website.dao.aop"></context:component-scan>
	<context:component-scan base-package="com.community.website.service.aop"></context:component-scan>
	
	<!-- AOP 추가 -->
	
	<!-- 빈(Beans) 등록 -->
	<context:component-scan base-package="com.community.website.dao"></context:component-scan>
	<context:component-scan base-package="com.community.website.service"></context:component-scan>
	<context:component-scan base-package="com.community.website.aop"></context:component-scan>
	<context:component-scan base-package="com.community.website.interceptor"></context:component-scan>
	
</beans>
